<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chinasofti.lexian.order.dao.impl.OrderDaoImpl">
	<select id="findTopCommodities" resultType="TopSalesCommodityPo">
		SELECT A.commodity_no, A.name as commodity_name, A.pictureurl, B.counts, C.commodity_price
		FROM commodity AS A INNER JOIN maxsalescommodityview AS B ON A.commodity_no=B.commodity_no
		INNER JOIN minpricecommodityview AS C ON B.commodity_no=C.commodity_no 
		ORDER BY counts DESC
		LIMIT 0, 12
	</select>
	<select id="findOrderItems" resultType="OrderItemVo">
	    SELECT A.id, A.order_id AS orderId, A.commodity_no AS commodityNo, A.amount, 
		A.listprice, A.totalprice, B.name AS commodityName, B.pictureurl
		FROM orderitem A INNER JOIN commodity B ON A.commodity_no=B.commodity_no
		WHERE A.order_id=#{orderId}
	</select>
	<select id="findOrderSimple" resultType="OrderPo">
	    SELECT orders.id, order_no, user_id, totalamount, orders.store_no, store.storename,
	    orders.states, paymenttype, paymentsubtype, deliverytype, createtime
	    FROM orders INNER JOIN store ON orders.store_no=store.store_no
	    WHERE order_no=#{order_no}
	</select>
	
	<select id="getItemsForTrolley" resultType="OrderItemPo">
	    SELECT commodity_no, listprice, amont AS amount, totalprice FROM trolley 
	    WHERE id IN
	    <foreach collection="array" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</select>
	
	<select id="findOrders" resultType="OrderPo">
	    SELECT orders.id, order_no, user_id, totalamount, orders.store_no, store.storename,
	    orders.states, paymenttype,paymentsubtype, deliverytype, createtime
	    FROM orders INNER JOIN store ON orders.store_no=store.store_no
	    WHERE user_id=#{user_id}
	    <if test="states==100">
	        AND orders.states BETWEEN 2 AND 100
	    </if>
	    <if test="states!=0 and states&lt;100">
	        AND orders.states=#{states}
	    </if> 
	    ORDER BY orders.id DESC
	</select>
	
	<insert id="addOrder" useGeneratedKeys="true" keyProperty="id">
	    INSERT INTO orders(order_no, user_id, totalamount, store_no, states, paymenttype, deliverytype, createtime)
		VALUES(#{order_no}, #{user_id}, #{totalamount}, #{store_no}, 1, #{paymenttype}, #{deliverytype}, now())
	</insert>
	
	<insert id="updateOrderPay">
	    UPDATE orders SET paymentsubtype=#{paymentsubtype}, states=#{states}
	    WHERE order_no=#{order_no}
	</insert>
	
	<insert id="updateOrderStates">
	    UPDATE orders SET states=#{states}
	    WHERE order_no=#{order_no}
	</insert>
	
	<insert id="addOrderItem">
	    INSERT INTO orderitem(order_id, commodity_no, amount, listprice, totalprice)
	    VALUES(#{order_id}, #{commodity_no}, #{amount}, #{listprice}, #{totalprice})
	</insert>
	
	<update id="updateStock">
	    UPDATE commodity_store SET commodity_amont=commodity_amont-#{amount}
	    WHERE commodity_no=#{commodity_no} AND store_no=#{store_no}
	</update>
</mapper>